import telebot
from telebot import types
from dotenv import load_dotenv
from typing import List, Dict
from os import environ

load_dotenv()

YANDEX_API_TOKEN = environ.get("yandex_api_token")
YANDEX_FOLDER_ID = environ.get("yandex_folder_id")
BOT_TOKEN = environ.get("bot_token")

bot = telebot.TeleBot(BOT_TOKEN)
questions = [('–ö–∞–∫–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º –±—ã–ª —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫?', None), ('–ß–µ–º—É –æ–Ω –ø–æ—Å–≤—è—Ç–∏–ª —Å–≤–æ—é –∂–∏–∑–Ω—å?', None), ('–ö–∞–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –±—ã–ª–∏ –µ–º—É –ø—Ä–∏—Å—É—â–∏?', None), ('–ó–∞ —á—Ç–æ –µ–≥–æ –±—É–¥—É—Ç –ø–æ–º–Ω–∏—Ç—å?', None), ('–ß—Ç–æ –æ–Ω –æ—Å—Ç–∞–≤–∏–ª –ø–æ—Å–ª–µ —Å–µ–±—è?', None),
             ('–í —á—ë–º –æ–Ω –≤–∏–¥–µ–ª —Å–º—ã—Å–ª –∂–∏–∑–Ω–∏?', None), ('–ö–∞–∫ –æ–Ω –æ—Ç–Ω–æ—Å–∏–ª—Å—è –∫ –ª—é–¥—è–º?', None), ('–ß–µ–º –æ–Ω –¥–æ—Ä–æ–∂–∏–ª –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?', None), ('–ß—Ç–æ –±—ã–ª–æ –¥–ª—è –Ω–µ–≥–æ —Å–∞–º—ã–º –≤–∞–∂–Ω—ã–º?', None), ('–ö–∞–∫–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –≤—ã –±—ã –æ—Ç–º–µ—Ç–∏–ª–∏?', None)]
answers: Dict[int, List[str]] = {}
pagination: Dict[int, int] = {}


def get_keyboard() -> types.InlineKeyboardMarkup:
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("‚óÄÔ∏è", callback_data="issues:back"),
        types.InlineKeyboardButton("üîÅ", callback_data="issues:regenerate"),
        types.InlineKeyboardButton("‚ñ∂Ô∏è", callback_data="issues:next")
    )
    keyboard.add(types.InlineKeyboardButton("‚èπÔ∏è", callback_data="issues:stop"))
    return keyboard


def handle_que(message: types.Message, only_edited: bool = False) -> None:
    if pagination[message.chat.id] >= len(questions):
        handle_general_answer(message)
        return
    text = answers[message.chat.id][pagination[message.chat.id]][0]
    if current_answer := answers[message.chat.id][pagination[message.chat.id]][1]:
        text += f"\n–¢–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç: {current_answer}"
    bot.edit_message_text(text,
                          message.chat.id, message.id, reply_markup=get_keyboard())
    if not only_edited:
        bot.register_next_step_handler_by_chat_id(
            message.chat.id, answer_question(message))


def handle_general_answer(message: types.Message):
    bot.edit_message_text("–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!",
                          message.chat.id, message.id)


@bot.message_handler(commands=['start'])
def command_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton(text="–ü—Ä–∏—Å—Ç—É–ø–µ–º"))
    bot.reply_to(
        message, "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å —ç–ø–∏—Ç–∞—Ñ–∏—é –æ —á–µ–ª–æ–≤–µ–∫–µ.", reply_markup=keyboard)


@bot.message_handler(func=lambda message: message.text == '–ü—Ä–∏—Å—Ç—É–ø–µ–º')
def handle_attack(message: types.Message):
    answers[message.chat.id] = questions.copy()
    pagination[message.chat.id] = 0
    message = bot.send_message(
        message.chat.id, answers[message.chat.id][pagination[message.chat.id]][0], reply_markup=get_keyboard())
    bot.register_next_step_handler_by_chat_id(
        message.chat.id, answer_question(message))


def answer_question(que_message: types.Message):
    def wrapped(message: types.Message):
        if message.text.startswith("/"):
            return
        answers[message.chat.id][pagination[message.chat.id]] = (questions[pagination[message.chat.id]][0], message.text)
        pagination[message.chat.id] += 1
        try:
            bot.delete_message(message.chat.id, message.id)
        except telebot.apihelper.ApiTelegramException:
            pass
        handle_que(que_message)
    return wrapped


@bot.callback_query_handler(lambda cb: cb.data == 'issues:back')
def handle_query_back(callback: types.CallbackQuery):
    pagination[callback.message.chat.id] -= 1
    handle_que(callback.message, only_edited=True)


@bot.callback_query_handler(lambda cb: cb.data == 'issues:next')
def handle_query_next(callback: types.CallbackQuery):
    pagination[callback.message.chat.id] += 1
    handle_que(callback.message, only_edited=True)


@bot.callback_query_handler(lambda cb: cb.data == 'issues:stop')
def handle_query_stop(callback: types.CallbackQuery):
    handle_general_answer(callback.message)


def start_bot():
    bot.polling()
